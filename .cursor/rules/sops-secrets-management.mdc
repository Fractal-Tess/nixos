# SOPS Secrets Management Guidelines

## Modular SOPS Structure

### Core Files

- [modules/nixos/services/sops/base.nix](mdc:modules/nixos/services/sops/base.nix) - Core SOPS configuration
- [modules/nixos/services/sops/ssh.nix](mdc:modules/nixos/services/sops/ssh.nix) - SSH secrets management
- [modules/nixos/services/sops/samba.nix](mdc:modules/nixos/services/sops/samba.nix) - Samba user management
- [modules/nixos/services/sops/default.nix](mdc:modules/nixos/services/sops/default.nix) - Main module imports

### Secret File Organization

- [secrets/secrets.yaml](mdc:secrets/secrets.yaml) - Main secrets file for basic secrets and passwords
- [secrets/ssh_authorized_keys.yaml](mdc:secrets/ssh_authorized_keys.yaml) - SSH public keys
- [secrets/ssh_config.yaml](mdc:secrets/ssh_config.yaml) - SSH client configuration

## SOPS Module Pattern

### Base Configuration

```nix
# In base.nix
sops.defaultSopsFile = ../../../../secrets/secrets.yaml;
sops.defaultSopsFormat = "yaml";
sops.age.keyFile = "/home/${username}/.config/sops/age/keys.txt";
```

### Service-Specific Secrets

```nix
# In service-specific module (e.g., samba.nix)
options.modules.services.sops.[service] = {
  enable = mkEnableOption "[Service] secrets management via SOPS";
  # Service-specific options
};

config = mkIf (config.modules.services.sops.enable && cfg.enable) {
  sops.secrets = lib.listToAttrs (map
    (item: {
      name = "service_${item.name}_secret";
      value = {
        owner = "root";
        mode = "0400";
        path = "/run/secrets/service_${item.name}_secret";
      };
    })
    cfg.items);
};
```

### Activation Scripts for User Management

```nix
system.activationScripts.[service]Users = lib.concatStringsSep "\n" ([
  "# Create [Service] users from SOPS secrets"
] ++ (map
  (user: ''
    # Create user if it doesn't exist
    if ! command -v check_user | grep -q "^${user.name}:"; then
      echo "Creating user ${user.name}..."
      (cat /run/secrets/service_${user.name}_secret; echo; cat /run/secrets/service_${user.name}_secret) | create_user_command -s -a ${user.name}
    else
      echo "User ${user.name} already exists, updating..."
      (cat /run/secrets/service_${user.name}_secret; echo; cat /run/secrets/service_${user.name}_secret) | update_user_command -s ${user.name}
    fi
  '')
  cfg.users));
```

## Host Configuration Pattern

### Enable SOPS with Multiple Services

```nix
modules.services.sops = {
  enable = true;
  ssh = {
    enable = true;
    authorizedKeys.enable = true;
    config.enable = true;
  };
  samba = {
    enable = true;
    users = [
      {
        name = "username";
        secretKey = "samba_username_password";
      }
    ];
  };
};
```

## Security Best Practices

### Secret Storage

- Store passwords in `/run/secrets/` with restricted permissions (0400)
- Use descriptive secret names: `samba_username_password`
- Reference secrets by their SOPS key in configuration

### User Management

- Always check if user exists before creating
- Update existing users with new passwords from secrets
- Use non-interactive commands with `-s` flag for automation

### File Permissions

- SSH files: owner = username, placed in user's `.ssh/` directory
- Service passwords: owner = root, mode = "0400"
- Basic secrets: owner = username, appropriate paths

## Adding New Secret Types

1. Create new submodule: `modules/nixos/services/sops/[service].nix`
2. Add to main module imports: [modules/nixos/services/sops/default.nix](mdc:modules/nixos/services/sops/default.nix)
3. Add secrets to appropriate YAML file
4. Update host configuration to enable the new service
5. Document in [modules/nixos/services/sops/README.md](mdc:modules/nixos/services/sops/README.md)
   description:
   globs:
   alwaysApply: false

---
